#include <SoftwareSerial.h>   // Incluye la librer√≠a para crear puertos seriales en otros pines (adem√°s del Serial est√°ndar)
#include <TinyGPS.h>          // Incluye la librer√≠a para procesar datos NMEA del GPS (coordenadas, fecha, velocidad, etc.)

TinyGPS gps;                  // Crea un objeto `gps` de tipo TinyGPS que se encargar√° de decodificar los datos del GPS
SoftwareSerial serialgps(4, 3); // Crea un puerto serie "virtual" en los pines 4 (RX) y 3 (TX) para comunicarse con el m√≥dulo GPS

// Variables para almacenar fecha y hora
int year;                     // A√±o (ej: 2025)
byte month, day, hour, minute, second, hundredths; // Mes, d√≠a, hora, minuto, segundo y cent√©simas

// Variables para estad√≠sticas del GPS
unsigned long chars;          // N√∫mero total de caracteres recibidos desde el GPS
unsigned short sentences;     // N√∫mero de sentencias (frases) v√°lidas recibidas
unsigned short failed_checksum; // N√∫mero de frases con errores de validaci√≥n (checksum)

void setup() {
  Serial.begin(115200);       // Inicia la comunicaci√≥n serial con la PC a 115200 baudios
  serialgps.begin(9600);      // Inicia la comunicaci√≥n con el m√≥dulo GPS a 9600 baudios (est√°ndar para GY-GPS6MV2)

  Serial.println();                           // L√≠nea en blanco para separar la salida
  Serial.println("GPS GY-GPS6MV2 - Sistema Iniciado"); // Mensaje de inicio del sistema
  Serial.println("Buscando se√±al GPS...");    // Indica que el GPS a√∫n est√° buscando se√±al
}

void loop() {
  // Mientras haya datos disponibles desde el m√≥dulo GPS
  while (serialgps.available()) {
    char c = serialgps.read(); // Lee un car√°cter del buffer serial del GPS

    // Si el car√°cter completa una sentencia v√°lida del protocolo NMEA
    if (gps.encode(c)) {
      mostrarPosicion();       // Llama a la funci√≥n que muestra latitud y longitud
      mostrarFechaHora();      // Muestra la fecha y hora obtenida del GPS
      mostrarDatosExtras();    // Muestra altitud, velocidad, rumbo y sat√©lites
      mostrarEstadisticas();   // Muestra estad√≠sticas de recepci√≥n del GPS
      Serial.println("--------------------------\n"); // L√≠nea separadora entre ciclos
      delay(2000);             // Espera 2 segundos antes de leer nuevamente (para no saturar)
    }
  }
}

// üß≠ Funci√≥n que muestra latitud y longitud
void mostrarPosicion() {
  float latitude, longitude; // Variables para almacenar coordenadas

  gps.f_get_position(&latitude, &longitude); // Obtiene la posici√≥n actual (en grados decimales)

  // Verifica si los datos son v√°lidos
  if (latitude == TinyGPS::GPS_INVALID_F_ANGLE || longitude == TinyGPS::GPS_INVALID_F_ANGLE) {
    Serial.println("Latitud/Longitud: No disponible"); // Mensaje de error si no hay datos v√°lidos
  } else {
    Serial.print("Latitud: "); Serial.print(latitude, 6);    // Imprime latitud con 6 decimales
    Serial.print(" | Longitud: "); Serial.println(longitude, 6); // Imprime longitud
  }
}

// ‚è∞ Funci√≥n que muestra la fecha y hora actual
void mostrarFechaHora() {
  // Extrae la fecha y hora del objeto GPS y las guarda en las variables
  gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, &hundredths);

  if (year == 0) { // Si no se obtuvo una fecha v√°lida
    Serial.println("Fecha y hora: No disponible");
  } else {
    // Muestra la fecha en formato DD/MM/AAAA
    Serial.print("Fecha: ");
    if (day < 10) Serial.print("0"); Serial.print(day);
    Serial.print("/");
    if (month < 10) Serial.print("0"); Serial.print(month);
    Serial.print("/");
    Serial.print(year);

    // Muestra la hora en formato HH:MM:SS
    Serial.print(" | Hora: ");
    if (hour < 10) Serial.print("0"); Serial.print(hour); Serial.print(":");
    if (minute < 10) Serial.print("0"); Serial.print(minute); Serial.print(":");
    if (second < 10) Serial.print("0"); Serial.print(second);
    Serial.println(); // Salto de l√≠nea
  }
}

// üì° Funci√≥n que muestra altitud, velocidad, rumbo y cantidad de sat√©lites
void mostrarDatosExtras() {
  float alt = gps.f_altitude();        // Obtiene altitud en metros
  float spd = gps.f_speed_kmph();      // Obtiene velocidad en km/h
  float crs = gps.f_course();          // Obtiene rumbo (√°ngulo de movimiento)
  int sats = gps.satellites();         // Obtiene n√∫mero de sat√©lites conectados

  // Verificaciones para cada par√°metro y su impresi√≥n
  Serial.print("Altitud: ");
  (alt == TinyGPS::GPS_INVALID_F_ALTITUDE) ? Serial.println("N/A") : Serial.println(String(alt, 2) + " m");

  Serial.print("Velocidad: ");
  (spd == TinyGPS::GPS_INVALID_F_SPEED) ? Serial.println("N/A") : Serial.println(String(spd, 2) + " km/h");

  Serial.print("Rumbo: ");
  (crs == TinyGPS::GPS_INVALID_F_ANGLE) ? Serial.println("N/A") : Serial.println(String(crs, 2) + "¬∞");

  Serial.print("Sat√©lites: ");
  Serial.println((sats == TinyGPS::GPS_INVALID_SATELLITES) ? "N/A" : String(sats));
}

// üìä Funci√≥n que muestra estad√≠sticas de transmisi√≥n
void mostrarEstadisticas() {
  gps.stats(&chars, &sentences, &failed_checksum); // Actualiza los valores de estad√≠sticas

  Serial.print("Caracteres procesados: "); Serial.println(chars);       // Total de caracteres NMEA recibidos
  Serial.print("Frases v√°lidas: "); Serial.println(sentences);          // Frases completas y v√°lidas
  Serial.print("Errores de checksum: "); Serial.println(failed_checksum); // Frases con errores de validaci√≥n
}
